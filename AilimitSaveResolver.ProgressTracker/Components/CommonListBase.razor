@typeparam T

<div class="item-list-container">
    <p>@Label</p>
    <div class="item-list">
        @foreach (var item in Items)
        {
            <div class="item"
                 @onclick="HandleOnItemClicked(item)"
                 @onmouseenter="HandleOnItemMouseEntered(item)"
                 @onmouseleave="HandleOnItemMouseLeaved(item)">
                @ItemTemplate(item)
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public required string Label { get; set; }
    [Parameter] public required IEnumerable<T> Items { get; set; }
    [Parameter] public required RenderFragment<T> ItemTemplate { get; set; }
    [Parameter] public EventCallback<T>? OnItemClicked { get; set; }
    [Parameter] public EventCallback<T>? OnItemMouseEntered { get; set; }
    [Parameter] public EventCallback<T>? OnItemMouseLeaved { get; set; }

    private Func<MouseEventArgs, Task> HandleOnItemClicked(T item)
        => _ => OnItemClicked?.InvokeAsync(item) ?? Task.CompletedTask;

    private Func<MouseEventArgs, Task> HandleOnItemMouseEntered(T item)
        => _ => OnItemMouseEntered?.InvokeAsync(item) ?? Task.CompletedTask;
    
    private Func<MouseEventArgs, Task> HandleOnItemMouseLeaved(T item)
        => _ => OnItemMouseLeaved?.InvokeAsync(item) ?? Task.CompletedTask;
}
