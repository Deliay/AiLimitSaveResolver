@inject IStringLocalizer<ItemsCommon> Localizer
@inject IStringLocalizer<SealsLocale> ItemLocalizer

<CommonList
    Left="_collectedList" LeftLabel="@(Localizer["Collected"])"
    Right="_notCollected" RightLabel="@(Localizer["NotFound"])" />

@code {
    private List<(string Icon, LocalizedString Name, LocalizedString)> _collectedList = [];
    private List<(string Icon, LocalizedString Name, LocalizedString)> _notCollected = [];
    [Parameter] public required SaveSlot Slot { get; set; }

    protected override void OnParametersSet()
    {
        var collectedRootSealId = Slot.Collected.SealIds
            .Where(id => id < 2000)
            .Select(GetRootSealId).ToHashSet();

        var notCollectedTotalIds = Access.Data<SealIds>().Keys
            .Where(id => !collectedRootSealId.Contains(GetRootSealId(id)))
            .ToList();

        var collected = Enumerable.Repeat(1000u, 1).Concat(Slot.Collected.SealIds).ToList();

        (_collectedList, _notCollected) = CollectionHelper.Diff(notCollectedTotalIds, collected, GetIcon,
            (id) => ItemLocalizer[$"{id}"], 
            (id) => id < 2000 ? ItemLocalizer["MainSeal"] : ItemLocalizer["NormalSeal"]);
    }

    private static uint GetRootSealId(uint sealId) => (sealId - 1000) / 10 * 10;
    
    private static string GetIcon(uint id) => id switch
    {
        <= 1999 => $"./images/seals/icon_proseal_{GetRootSealId(id):0000}.webp",
        _ => $"./images/seals/icon_seal_{id:0000}.webp",
    };
}
